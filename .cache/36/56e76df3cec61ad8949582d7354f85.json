{"id":"../node_modules/point-in-polygon/nested.js","dependencies":[{"name":"C:\\Users\\charl\\Documents\\Polytechnique\\5-Maîtrise\\DataVisualization\\INF8808\\Projet\\package.json","includedInParent":true,"mtime":1656057819169},{"name":"C:\\Users\\charl\\Documents\\Polytechnique\\5-Maîtrise\\DataVisualization\\INF8808\\Projet\\node_modules\\point-in-polygon\\package.json","includedInParent":true,"mtime":1656058476794}],"generated":{"js":"// ray-casting algorithm based on\n// https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\nmodule.exports = function pointInPolygonNested (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = end - start;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[i+start][0], yi = vs[i+start][1];\n        var xj = vs[j+start][0], yj = vs[j+start][1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/point-in-polygon/nested.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"../node_modules/point-in-polygon/nested.js":"// ray-casting algorithm based on\n// https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\nmodule.exports = function pointInPolygonNested (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = end - start;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[i+start][0], yi = vs[i+start][1];\n        var xj = vs[j+start][0], yj = vs[j+start][1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n"},"lineCount":19}},"error":null,"hash":"6448882170eaf6635c0b4c2bd7388f6f","cacheData":{"env":{}}}